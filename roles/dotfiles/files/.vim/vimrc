"       _
"__   _(_)_ __ ___  _ __ ___
"\ \ / / | '_ ` _ \| '__/ __|
" \ V /| | | | | | | | | (__
"  \_/ |_|_| |_| |_|_|  \___|

set nocompatible " Required by vundle
filetype off     " Required by vundle

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'
" ==== PLUGINS ====
Plugin 'Chiel92/vim-autoformat'
Plugin 'JamshedVesuna/vim-markdown-preview'
Plugin 'Valloric/YouCompleteMe'
Plugin 'airblade/vim-gitgutter'
Plugin 'aklt/plantuml-syntax'
Plugin 'bling/vim-airline'
Plugin 'bronson/vim-trailing-whitespace'
Plugin 'cakebaker/scss-syntax.vim'
Plugin 'chriskempson/base16-vim'                 " from http://chriskempson.com/projects/base16/
Plugin 'dhruvasagar/vim-table-mode'
Plugin 'ervandew/supertab'
Plugin 'fatih/vim-go'
Plugin 'godlygeek/tabular'
Plugin 'heavenshell/vim-jsdoc'
Plugin 'jiangmiao/auto-pairs'
Plugin 'jlanzarotta/bufexplorer'
Plugin 'kien/ctrlp.vim'
Plugin 'leafgarland/typescript-vim'
Plugin 'mileszs/ack.vim'
Plugin 'pangloss/vim-javascript'
Plugin 'plasticboy/vim-markdown'
Plugin 'scrooloose/nerdtree'
Plugin 'ternjs/tern_for_vim'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-sensible'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-unimpaired'
Plugin 'vim-scripts/tComment'
Plugin 'w0rp/ale'                                " Linter for Javascript
Plugin 'wincent/command-t'                       " Alternative to Ctrlp
Plugin 'junegunn/goyo.vim'

call vundle#end()

filetype plugin indent on

syntax enable

if exists('$SUDO_USER')                          " Keep the backup and swap files out of the way
    set nobackup
    set nowritebackup
    set noswapfile
else
    set backupdir=~/.vim.backup
    set backupdir+=~/.vim/tmp/backup
    set backupdir+=.
    set directory=~/.vim.swap
    set directory+=~/.vim/tmp/swap
    set directory+=.
endif

let &colorcolumn="120"
set autoindent
set backspace=indent,start,eol                   " Allow unrestricted access of backspace in insert mode
set autoread                                     " Auto read file if it changed
set background=dark
set cindent
set clipboard=unnamed                            " set clipboard to OSX default Linux!!!
set colorcolumn=+1
set encoding=utf-8
set expandtab
set fileformat=unix                              " Default mode is unix
set fileformats=unix,dos,mac                     " Detect this order
set foldlevel=99
set hidden
set history=9999
set hlsearch
set ignorecase smartcase
set incsearch
set laststatus=2
set mouse=r
set nobackup                                     " Do not generate ~ files
set noerrorbells visualbell t_vb=                " turns off all error bells, visual or otherwise
set nofoldenable
set nowrap
set nu                                           " Set line numbers on
set number
set ruler
set shiftwidth=4
set showmatch
set smartindent
set softtabstop=4
set st=4 sw=4 et
set tabstop=4                                    " default tab size
set textwidth=120                                " add visualization for max text width
set list listchars=tab:▸\ ,trail:.
set list

" Set leader to space
let mapleader=" "

" Automatically delete trailing DOS-returns and whitespace on file open and write.
augroup vimrc
  autocmd BufRead,BufWritePre,FileWritePre * silent! %s/[\r \t]\+$//
augroup END

" Autoformat style
let g:formatdef_my_custom_cpp = '"astyle"'
let g:formatdef_my_custom_java = '"astyle --options=$HOME/.astylerc-java"'
let g:formatdef_my_custom_javascript = '"standard --fix"'
let g:formatters_c = ['my_custom_cpp']"
let g:formatters_cpp = ['my_custom_cpp']"
let g:formatters_java = ['my_custom_java']"
let g:formatters_javascript = ['my_custom_javascript']"

" Set some ignore patterns of directories and files
set wildignore+=*/build/*,*.so,*.swp,*.zip
set wildignore+=.git,.gitkeep
set wildignore+=*DS_Store*
set wildignore+=*.jpg,*.git,*.gif
set wildignore+=*.class

" ==== NERDTREE ====
let NERDTreeIgnore = ['\.pyc$', '\.o$', '\.so$', '\.a$', '\.swp', '\.swo', '\.swn', '\.swm', '[a-zA-Z]*egg[a-zA-Z]*', '[a-zA-Z]*cache[a-zA-Z]*']
let NERDTreeShowHidden=1
let g:NERDTreeWinPos="left"
let g:NERDTreeDirArrows=0
let g:NERDTreeWinSize = 25
map <leader>ff :NERDTreeFind<cr>

" === NETRW file explorer ===
map  <F3>  :Explore<CR>
let g:netrw_liststyle = 3
let g:netrw_banner = 0
let g:netrw_list_hide= '.*\.swp$'

nmap <F2>  :YcmCompleter GoToDefinition<CR><CR>
nmap <F12> :wa<CR>
nmap <S-F12> :wq<CR>

" Open the current file in the webbrowser
map <leader>b :call RunGoogleChrome()<cr>

nnoremap <leader>sp :call FixLastSpellingError()<cr>
nnoremap <silent> <C-l> :<C-u>nohlsearch<CR><C-l> " hide search selection w/ C-l
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'
map <Leader>nn :e ~/.vim/vimrc<cr>
map <Leader><Esc> :BufExplorer<cr>

noremap <silent> <F4> :let @*=expand("%:p")<CR>

" Insert current date (in insert mode)
inoremap <F5> <C-R>=strftime("%Y-%m-%d")<CR>

" This shortcut copies the current filename and line number into the buffer for debugging (setting breakpoints)
nnoremap <leader>y :let @+=expand("%:t") . ':' . line(".")<CR>

autocmd FileType cpp          map <F10> :wa<cr>:call RunMake()<cr>
autocmd FileType javascript   map <F10> :wa<cr>:call RunNpmTest()<cr>

au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>t <Plug>(go-test)
au FileType go nmap <leader>c <Plug>(go-coverage)
au FileType go nmap <F1>      <Plug>(go-doc)

function! RunNpmTest()
    exec ':silent !tmux send-keys -t right "npm test" C-m'
    :redraw!
endfunction

function! RunMake()
    exec ':silent !tmux send-keys -t right "make -j4" C-m'
    :redraw!
endfunction

function! RunGoogleChrome()
    exec ':silent !open -a "Google Chrome" %'
    :redraw!
endfunction

let g:ackprg="/usr/bin/vendor_perl/ack -H --nocolor --nogroup --column"

:set guifont=Hack\ 12

if has('gui_running')
    colorscheme base16-eighties
endif

set laststatus=2                                 " Configure Airline
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline_theme='dark'
let g:airline#extensions#tabline#fnamemod = ':t'

set exrc                                         " Allow project-wise .vimrc files
set secure
:set diffopt+=vertical                           " In case of GIT diff split vertically

let g:EasyGrepFilesToExclude="tags,.git"

" Ignore some directories for CtrlP
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|^.git$\|_site'

" Enable auto format on save for Javascript
let g:ale_fixers = {
\   'javascript': ['standard'],
\}
let g:ale_linters = {
\   'javascript': ['standard'],
\   'cpp': ['cppcheck'],
\   'tex': ['lacheck']
\}
autocmd Filetype javascript setlocal ts=2 sts=2 sw=2
let g:ale_fix_on_save = 1

let g:ale_pattern_options = {
\   '.*\.cpp$': {'ale_enabled': 0},
\   '.*\.hpp$': {'ale_enabled': 0},
\   '.*\.h$': {'ale_enabled': 0}
\}

let g:ale_c_clangtidy_checks=["*", "-android*", "-google-readabi*", "-hicpp-*", "-*-braces-around-statements"]

function! FixLastSpellingError()
    normal! mm[s1z=`m
endfunction


" Make misspelled word underline
hi SpellBad cterm=underline

" Additional surround settings
" use b for double star
autocmd FileType markdown,asciidoc let b:surround_{char2nr('b')} = "**\r**"

" YouCompleteMe section
"" turn on completion in comments
let g:ycm_complete_in_comments=1
"" load ycm conf by default
let g:ycm_confirm_extra_conf=0
"" turn on tag completion
let g:ycm_collect_identifiers_from_tags_files=1
"" only show completion as a list instead of a sub-window
set completeopt-=preview
"" start completion from the second character
let g:ycm_min_num_of_chars_for_completion=2
"" don't cache completion items
let g:ycm_cache_omnifunc=0
"" complete syntax keywords
let g:ycm_seed_identifiers_with_syntax=1
let g:ycm_filetype_blacklist = { 'asciidoc': 1, 'mail': 1, 'markdown': 1 }
highlight YcmErrorLine guibg=#433D3D

let g:powerline_pycmd = 'py3'

" ALE Linter
let g:ale_lint_on_text_changed = 'never'

" Set comment color to terminal color (required for linux)
hi Comment ctermfg=4

let vim_markdown_preview_browser='qutebrowser'
let vim_markdown_preview_pandoc=1
let vim_markdown_preview_use_xdg_open=1

" Open corresponding .pdf/.html or preview
map <leader>p :!opout <c-r>%<CR><CR>

" Runs a script that cleans out tex build files whenever I close out of a .tex file.
autocmd VimLeave *.tex !texclear %

" Compile document, be it groff/LaTeX/markdown/etc.
map <leader>c :w! \| !compiler <c-r>%<CR><CR>
map <leader>v :!zathura "%:r".pdf&<CR><CR>

" Goyo settings
let g:goyo_width=125
let g:goyo_linenr=1

function CR()
    if searchpair('\\begin{itemize}', '', '\\end{itemize}', '')
        return "\r\\item"
    endif
    return "\r"
endfunction
inoremap <expr><buffer> <CR> CR()

 "____        _                  _
"/ ___| _ __ (_)_ __  _ __   ___| |_ ___
"\___ \| '_ \| | '_ \| '_ \ / _ \ __/ __|
 "___) | | | | | |_) | |_) |  __/ |_\__ \
"|____/|_| |_|_| .__/| .__/ \___|\__|___/
              "|_|   |_|

inoremap ,ae ä
inoremap ,oe ö
inoremap ,ue ü
inoremap ,Ae Ä
inoremap ,Oe Ö
inoremap ,Ue Ü

"""LATEX
	" Word count:
	autocmd FileType tex map <leader><leader>o :w !detex \| wc -w<CR>
	" Code snippets
	autocmd FileType tex inoremap ,fr <Esc>100i%<Esc>A<Enter>% Slide<Enter><Esc>100i%<Esc>A<Enter>\begin{frame}{}<Enter><Enter>\end{frame}<Esc>2kf}f}i
	autocmd FileType tex inoremap ,em \emph{}<++><Esc>T{i
	autocmd FileType tex inoremap ,bf \textbf{}<Esc>T{i
	autocmd FileType tex vnoremap , <ESC>`<i\{<ESC>`>2la}<ESC>?\\{<Enter>a
	autocmd FileType tex inoremap ,it \textit{}<++><Esc>T{i
	autocmd FileType tex inoremap ,ol \begin{enumerate}<Enter><Enter>\end{enumerate}<Enter><Enter><++><Esc>3kA\item<Space>
	autocmd FileType tex inoremap ,ul \begin{itemize}<Enter><Enter>\end{itemize}<Esc>1kA\item<Space>
	autocmd FileType tex inoremap ,li <Enter>\item<Space>
	autocmd FileType tex inoremap ,ref \ref{}<Space><++><Esc>T{i
	autocmd FileType tex inoremap ,tab \begin{tabular}<Enter><++><Enter>\end{tabular}<Enter><Enter><++><Esc>4kA{}<Esc>i
	autocmd FileType tex inoremap ,ot \begin{tableau}<Enter>\inp{<++>}<Tab>\const{<++>}<Tab><++><Enter><++><Enter>\end{tableau}<Enter><Enter><++><Esc>5kA{}<Esc>i
	autocmd FileType tex inoremap ,sc \textsc{}<Space><++><Esc>T{i
	autocmd FileType tex inoremap ,chap \chapter{}<Enter><Enter><++><Esc>2kf}i
	autocmd FileType tex inoremap ,sec \section{}<Enter><Enter><++><Esc>2kf}i
	autocmd FileType tex inoremap ,ssec \subsection{}<Enter><Enter><++><Esc>2kf}i
	autocmd FileType tex inoremap ,sssec \subsubsection{}<Enter><Enter><++><Esc>2kf}i
	autocmd FileType tex inoremap ,st <Esc>F{i*<Esc>f}i
	autocmd FileType tex inoremap ,up <Esc>/usepackage<Enter>o\usepackage{}<Esc>i
	autocmd FileType tex nnoremap ,up /usepackage<Enter>o\usepackage{}<Esc>i
	autocmd FileType tex inoremap ,tt \texttt{}<Space><++><Esc>T{i
	autocmd FileType tex inoremap ,col \begin{columns}[T]<Enter>\begin{column}{.5\textwidth}<Enter><Enter>\end{column}<Enter>\begin{column}{.5\textwidth}<Enter><++><Enter>\end{column}<Enter>\end{columns}<Esc>5kA
	autocmd FileType tex inoremap ,rn (\ref{})<++><Esc>F}i

"""HTML
	autocmd FileType html inoremap ,b <b></b><Space><++><Esc>FbT>i
	autocmd FileType html inoremap ,it <em></em><Space><++><Esc>FeT>i
	autocmd FileType html inoremap ,1 <h1></h1><Enter><Enter><++><Esc>2kf<i
	autocmd FileType html inoremap ,2 <h2></h2><Enter><Enter><++><Esc>2kf<i
	autocmd FileType html inoremap ,3 <h3></h3><Enter><Enter><++><Esc>2kf<i
	autocmd FileType html inoremap ,p <p></p><Enter><Enter><++><Esc>02kf>a
	autocmd FileType html inoremap ,a <a<Space>href=""><++></a><Space><++><Esc>14hi
	autocmd FileType html inoremap ,e <a<Space>target="_blank"<Space>href=""><++></a><Space><++><Esc>14hi
	autocmd FileType html inoremap ,ul <ul><Enter><li></li><Enter></ul><Enter><Enter><++><Esc>03kf<i
	autocmd FileType html inoremap ,li <Esc>o<li></li><Esc>F>a
	autocmd FileType html inoremap ,ol <ol><Enter><li></li><Enter></ol><Enter><Enter><++><Esc>03kf<i
	autocmd FileType html inoremap ,im <img src="" alt="<++>"><++><esc>Fcf"a
	autocmd FileType html inoremap ,td <td></td><++><Esc>Fdcit
	autocmd FileType html inoremap ,tr <tr></tr><Enter><++><Esc>kf<i
	autocmd FileType html inoremap ,th <th></th><++><Esc>Fhcit
	autocmd FileType html inoremap ,tab <table><Enter></table><Esc>O
	autocmd FileType html inoremap ,gr <font color="green"></font><Esc>F>a
	autocmd FileType html inoremap ,rd <font color="red"></font><Esc>F>a
	autocmd FileType html inoremap ,yl <font color="yellow"></font><Esc>F>a
	autocmd FileType html inoremap ,dt <dt></dt><Enter><dd><++></dd><Enter><++><esc>2kcit
	autocmd FileType html inoremap ,dl <dl><Enter><Enter></dl><enter><enter><++><esc>3kcc
	autocmd FileType html inoremap &<space> &amp;<space>
	autocmd FileType html inoremap á &aacute;
	autocmd FileType html inoremap é &eacute;
	autocmd FileType html inoremap í &iacute;
	autocmd FileType html inoremap ó &oacute;
	autocmd FileType html inoremap ú &uacute;
	autocmd FileType html inoremap ä &auml;
	autocmd FileType html inoremap ë &euml;
	autocmd FileType html inoremap ï &iuml;
	autocmd FileType html inoremap ö &ouml;
	autocmd FileType html inoremap ü &uuml;
	autocmd FileType html inoremap ã &atilde;
	autocmd FileType html inoremap ẽ &etilde;
	autocmd FileType html inoremap ĩ &itilde;
	autocmd FileType html inoremap õ &otilde;
	autocmd FileType html inoremap ũ &utilde;
	autocmd FileType html inoremap ñ &ntilde;
	autocmd FileType html inoremap à &agrave;
	autocmd FileType html inoremap è &egrave;
	autocmd FileType html inoremap ì &igrave;
	autocmd FileType html inoremap ò &ograve;
	autocmd FileType html inoremap ù &ugrave;

"MARKDOWN
	autocmd Filetype markdown,rmd map <leader>w yiWi[<esc>Ea](<esc>pa)
	autocmd Filetype markdown,rmd inoremap ,n ---<Enter><Enter>
	autocmd Filetype markdown,rmd inoremap ,b ****<++><Esc>F*hi
	autocmd Filetype markdown,rmd inoremap ,s ~~~~<++><Esc>F~hi
	autocmd Filetype markdown,rmd inoremap ,e **<++><Esc>F*i
	autocmd Filetype markdown,rmd inoremap ,h ====<Space><++><Esc>F=hi
	autocmd Filetype markdown,rmd inoremap ,i ![](<++>)<++><Esc>F[a
	autocmd Filetype markdown,rmd inoremap ,a [](<++>)<++><Esc>F[a
	autocmd Filetype markdown,rmd inoremap ,1 #<Space><Enter><++><Esc>kA
	autocmd Filetype markdown,rmd inoremap ,2 ##<Space><Enter><++><Esc>kA
	autocmd Filetype markdown,rmd inoremap ,3 ###<Space><Enter><++><Esc>kA
	autocmd Filetype markdown,rmd inoremap ,l --------<Enter>
	autocmd Filetype rmd inoremap ,r ```{r}<CR>```<CR><CR><esc>2kO
	autocmd Filetype rmd inoremap ,p ```{python}<CR>```<CR><CR><esc>2kO
	autocmd Filetype rmd inoremap ,c ```<cr>```<cr><cr><esc>2kO

